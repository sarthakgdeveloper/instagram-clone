[{"D:\\React Course\\instagram-clone\\src\\redux\\user\\userAction.js":"1","D:\\React Course\\instagram-clone\\src\\App.js":"2","D:\\React Course\\instagram-clone\\src\\components\\signup\\signUpPage.jsx":"3","D:\\React Course\\instagram-clone\\src\\components\\header\\header.jsx":"4","D:\\React Course\\instagram-clone\\src\\redux\\rootReducer.js":"5","D:\\React Course\\instagram-clone\\src\\components\\userProfile\\userProfile.jsx":"6","D:\\React Course\\instagram-clone\\src\\components\\userPostPopUp\\userPostPopUp.jsx":"7","D:\\React Course\\instagram-clone\\src\\components\\addNewPost\\addNewPost.jsx":"8","D:\\React Course\\instagram-clone\\src\\index.js":"9","D:\\React Course\\instagram-clone\\src\\redux\\mainUser\\mainUserAction.js":"10","D:\\React Course\\instagram-clone\\src\\Firebase\\firebase.utils.js":"11","D:\\React Course\\instagram-clone\\src\\components\\userPost\\userPost.jsx":"12","D:\\React Course\\instagram-clone\\src\\redux\\mainUser\\mainUserSelector.js":"13","D:\\React Course\\instagram-clone\\src\\components\\headerUserInfo\\headerUserInfo.jsx":"14","D:\\React Course\\instagram-clone\\src\\redux\\user\\userReducer.js":"15","D:\\React Course\\instagram-clone\\src\\components\\signIn\\signIn.jsx":"16","D:\\React Course\\instagram-clone\\src\\components\\afterSignUpPage\\afterSignUpPage.jsx":"17","D:\\React Course\\instagram-clone\\src\\redux\\mainUser\\mainUser.saga.js":"18","D:\\React Course\\instagram-clone\\src\\redux\\user\\user.saga.js":"19","D:\\React Course\\instagram-clone\\src\\components\\userProfileRoute\\userProfileRoute.jsx":"20","D:\\React Course\\instagram-clone\\src\\components\\loader\\loader.jsx":"21","D:\\React Course\\instagram-clone\\src\\redux\\mainUser\\mainUserTypes.js":"22","D:\\React Course\\instagram-clone\\src\\components\\post\\post.jsx":"23","D:\\React Course\\instagram-clone\\src\\components\\anotherUserProfile\\anotherUserProfile.jsx":"24","D:\\React Course\\instagram-clone\\src\\redux\\posts\\posts.types.js":"25","D:\\React Course\\instagram-clone\\src\\reportWebVitals.js":"26","D:\\React Course\\instagram-clone\\src\\redux\\posts\\posts.reducer.js":"27","D:\\React Course\\instagram-clone\\src\\redux\\posts\\posts.selector.js":"28","D:\\React Course\\instagram-clone\\src\\redux\\user\\userSelector.js":"29","D:\\React Course\\instagram-clone\\src\\redux\\user\\userTypes.js":"30","D:\\React Course\\instagram-clone\\src\\redux\\store.js":"31","D:\\React Course\\instagram-clone\\src\\redux\\posts\\posts.saga.js":"32","D:\\React Course\\instagram-clone\\src\\redux\\posts\\posts.action.js":"33","D:\\React Course\\instagram-clone\\src\\redux\\root.saga.js":"34","D:\\React Course\\instagram-clone\\src\\components\\userContent\\usersContent.jsx":"35","D:\\React Course\\instagram-clone\\src\\components\\addNewPost\\functionsTCrop.js":"36","D:\\React Course\\instagram-clone\\src\\components\\signup\\signup.jsx":"37","D:\\React Course\\instagram-clone\\src\\redux\\mainUser\\mainUserReducer.js":"38","D:\\React Course\\instagram-clone\\src\\components\\users\\users.jsx":"39","D:\\React Course\\instagram-clone\\src\\redux\\posts\\functionsInReducers.js":"40","D:\\React Course\\instagram-clone\\src\\components\\header\\header-mobile\\header-mobile.jsx":"41","D:\\React Course\\instagram-clone\\src\\components\\header\\header-pc\\header-pc.jsx":"42","D:\\React Course\\instagram-clone\\src\\components\\userPostCollection\\userPostCollection.jsx":"43","D:\\React Course\\instagram-clone\\src\\components\\Notification\\Notification.jsx":"44","D:\\React Course\\instagram-clone\\src\\components\\seachUser\\SearchUser.jsx":"45","D:\\React Course\\instagram-clone\\src\\components\\addNewProfileImage\\AddNewProfileImage.jsx":"46","D:\\React Course\\instagram-clone\\src\\components\\showFollow\\ShowFollow.jsx":"47","D:\\React Course\\instagram-clone\\src\\components\\messageChatBox\\MessageChatBox.jsx":"48"},{"size":1755,"mtime":1637080725364,"results":"49","hashOfConfig":"50"},{"size":2954,"mtime":1636962575791,"results":"51","hashOfConfig":"50"},{"size":1774,"mtime":1611649641406,"results":"52","hashOfConfig":"50"},{"size":421,"mtime":1635408550345,"results":"53","hashOfConfig":"50"},{"size":349,"mtime":1628409526684,"results":"54","hashOfConfig":"50"},{"size":4193,"mtime":1614929271461,"results":"55","hashOfConfig":"50"},{"size":5695,"mtime":1637080288646,"results":"56","hashOfConfig":"50"},{"size":6751,"mtime":1614508858005,"results":"57","hashOfConfig":"50"},{"size":660,"mtime":1611474603930,"results":"58","hashOfConfig":"50"},{"size":2484,"mtime":1614537251663,"results":"59","hashOfConfig":"50"},{"size":11155,"mtime":1635667235173,"results":"60","hashOfConfig":"50"},{"size":1721,"mtime":1639037313483,"results":"61","hashOfConfig":"50"},{"size":697,"mtime":1614419429023,"results":"62","hashOfConfig":"50"},{"size":2221,"mtime":1636963107442,"results":"63","hashOfConfig":"50"},{"size":1819,"mtime":1639037313483,"results":"64","hashOfConfig":"50"},{"size":1562,"mtime":1639037313483,"results":"65","hashOfConfig":"50"},{"size":2404,"mtime":1635751121596,"results":"66","hashOfConfig":"50"},{"size":4715,"mtime":1635667347618,"results":"67","hashOfConfig":"50"},{"size":2816,"mtime":1614367436916,"results":"68","hashOfConfig":"50"},{"size":1186,"mtime":1614607305744,"results":"69","hashOfConfig":"50"},{"size":192,"mtime":1612367155028,"results":"70","hashOfConfig":"50"},{"size":968,"mtime":1614537194737,"results":"71","hashOfConfig":"50"},{"size":4758,"mtime":1614928670295,"results":"72","hashOfConfig":"50"},{"size":5984,"mtime":1635756735708,"results":"73","hashOfConfig":"50"},{"size":325,"mtime":1613890144705,"results":"74","hashOfConfig":"50"},{"size":362,"mtime":1609755951921,"results":"75","hashOfConfig":"50"},{"size":948,"mtime":1614179034392,"results":"76","hashOfConfig":"50"},{"size":191,"mtime":1613760454441,"results":"77","hashOfConfig":"50"},{"size":808,"mtime":1614367650611,"results":"78","hashOfConfig":"50"},{"size":687,"mtime":1614368010763,"results":"79","hashOfConfig":"50"},{"size":524,"mtime":1611562259507,"results":"80","hashOfConfig":"50"},{"size":2561,"mtime":1614410577145,"results":"81","hashOfConfig":"50"},{"size":1131,"mtime":1614412148873,"results":"82","hashOfConfig":"50"},{"size":362,"mtime":1613380555987,"results":"83","hashOfConfig":"50"},{"size":796,"mtime":1614094063333,"results":"84","hashOfConfig":"50"},{"size":2315,"mtime":1613719731152,"results":"85","hashOfConfig":"50"},{"size":1116,"mtime":1611689443779,"results":"86","hashOfConfig":"50"},{"size":2686,"mtime":1614537300827,"results":"87","hashOfConfig":"50"},{"size":1057,"mtime":1635756382282,"results":"88","hashOfConfig":"50"},{"size":621,"mtime":1613911334915,"results":"89","hashOfConfig":"50"},{"size":622,"mtime":1637077616530,"results":"90","hashOfConfig":"50"},{"size":629,"mtime":1639037313483,"results":"91","hashOfConfig":"50"},{"size":423,"mtime":1614026089939,"results":"92","hashOfConfig":"50"},{"size":3225,"mtime":1614506341133,"results":"93","hashOfConfig":"50"},{"size":2907,"mtime":1614368609365,"results":"94","hashOfConfig":"50"},{"size":5660,"mtime":1614537500040,"results":"95","hashOfConfig":"50"},{"size":1235,"mtime":1614610734745,"results":"96","hashOfConfig":"50"},{"size":9883,"mtime":1636976595214,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17j4aun",{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200"},"D:\\React Course\\instagram-clone\\src\\redux\\user\\userAction.js",[],"D:\\React Course\\instagram-clone\\src\\App.js",["201"],"import React, { useEffect } from \"react\";\n\nimport \"./App.css\";\nimport UserPost from \"./components/userPost/userPost\";\nimport UserSignIn from \"./components/signIn/signIn\";\nimport UserSignUp from \"./components/signup/signup\";\nimport MessageChatBox from \"./components/messageChatBox/MessageChatBox\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { firestore, auth } from \"./Firebase/firebase.utils\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport Header from \"./components/header/header\";\nimport {\n  getCurrentUser,\n  getIsSignedIn,\n} from \"./redux/mainUser/mainUserSelector\";\nimport { checkCurrentUser, signOut } from \"./redux/mainUser/mainUserAction\";\nimport User from \"./components/users/users\";\nimport {\n  loadUserNotification,\n  newNotificationUnSeen,\n} from \"./redux/mainUser/mainUserAction\";\nimport Notification from \"./components/Notification/Notification\";\nimport SearchUser from \"./components/seachUser/SearchUser\";\n\nfunction App({\n  currentUser,\n  checkingCurrentUser,\n  getUserNotification,\n  newNotification,\n  signingOut,\n  isSignedIn,\n}) {\n  useEffect(() => {\n    checkingCurrentUser();\n    currentUser &&\n      firestore\n        .doc(`notifications/${currentUser.userName}`)\n        .onSnapshot((snapshot) => {\n          const notificationData = { ...snapshot.data() };\n          Object.keys(notificationData).length > 0 &&\n            notificationData.newNotification?.length > 0 &&\n            newNotification();\n          getUserNotification({ ...snapshot.data() });\n        });\n  }, [getUserNotification, isSignedIn]);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Switch>\n        <Route exact path=\"/\" component={UserPost} />\n        <Route\n          path=\"/signin\"\n          render={() => {\n            return currentUser ? <Redirect to=\"/\" /> : <UserSignIn />;\n          }}\n        />\n        <Route\n          path=\"/signup\"\n          render={() => {\n            return currentUser ? <Redirect to=\"/\" /> : <UserSignUp />;\n          }}\n        />\n        <Route path=\"/users\" component={User} />\n        <Route path=\"/notification\" component={Notification} />\n        <Route path=\"/search\" component={SearchUser} />\n        <Route path=\"/message/:userId\" component={MessageChatBox} />\n        <Route\n          path=\"/logout\"\n          render={() => {\n            auth.signOut();\n            signingOut();\n          }}\n        />\n      </Switch>\n    </div>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  checkingCurrentUser: () => dispatch(checkCurrentUser()),\n  getUserNotification: (Notification) =>\n    dispatch(loadUserNotification(Notification)),\n  newNotification: () => dispatch(newNotificationUnSeen()),\n  signingOut: () => dispatch(signOut()),\n});\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: getCurrentUser,\n  isSignedIn: getIsSignedIn,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","D:\\React Course\\instagram-clone\\src\\components\\signup\\signUpPage.jsx",[],"D:\\React Course\\instagram-clone\\src\\components\\header\\header.jsx",[],"D:\\React Course\\instagram-clone\\src\\redux\\rootReducer.js",[],"D:\\React Course\\instagram-clone\\src\\components\\userProfile\\userProfile.jsx",[],"D:\\React Course\\instagram-clone\\src\\components\\userPostPopUp\\userPostPopUp.jsx",[],"D:\\React Course\\instagram-clone\\src\\components\\addNewPost\\addNewPost.jsx",["202"],"import React, {useState, useCallback} from 'react';\r\nimport firebase from 'firebase';\r\nimport {fireStorage, firestore} from '../../Firebase/firebase.utils';\r\nimport {connect} from 'react-redux';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport {getCurrentUser} from '../../redux/mainUser/mainUserSelector';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {changeInCurrentUser} from '../../redux/mainUser/mainUserAction';\r\nimport {addNewPost} from '../../redux/posts/posts.action';\r\nimport Button from '@material-ui/core/Button';\r\nimport Cropper from 'react-easy-crop';\r\nimport {getCroppedImg} from './functionsTCrop';\r\n\r\nimport './addNewPost.scss';\r\n\r\nconst AddNewPost = ({currentUser, uploadPost}) => {\r\n    const {userName} = currentUser;\r\n    const inputRef = React.useRef();\r\n    \r\n    const [caption, setCaption] = useState('');\r\n    const [oldImage, setOldImage] = useState(null);\r\n    const [image, setImage] = useState(null);\r\n    const [crop, setCrop] = useState({x: 0, y: 0});\r\n    const [cropped, setCroppedArea] = useState(null);\r\n    const [croppedImage, setCroppedImage] = useState(null);\r\n    const [zoom, setZoom] = useState(1);\r\n    const [uploaded, checkUploaded] = useState(false);\r\n    const [blob, setBlob] = useState(null);\r\n    const [progress, checkProgress] = useState(0);\r\n    \r\n    const handleChange = (e) => {\r\n        if(e.target.files.length > 0){\r\n            setCroppedImage(null);\r\n            setOldImage(e.target.files[0]);\r\n            const ImageUrl = URL.createObjectURL(e.target.files[0]);\r\n            setImage(ImageUrl);\r\n        }\r\n    }\r\n    \r\n    const showCroppedImage = useCallback(async () => {\r\n        try {\r\n            let croppedImage = await getCroppedImg(\r\n                image,\r\n                cropped,\r\n                setBlob,\r\n                oldImage\r\n            )\r\n                setImage(null);\r\n                setCroppedImage(croppedImage)\r\n\r\n            } catch (e) {\r\n                console.error(e)\r\n        }\r\n      }, [cropped])\r\n\r\n \r\n\r\n    const handlePopUp = () => inputRef.current.click();\r\n\r\n    const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\r\n        setCroppedArea(croppedAreaPixels)\r\n      }, [])\r\n\r\n\r\n    const handleUpload = (e) => {\r\n        const uploadTask = fireStorage.ref(`images/${blob.name}`).put(blob);\r\n        uploadTask.on(\r\n            'state_changed',\r\n            (snapshot) => {\r\n                const getProgress = Math.round(\r\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n                );\r\n\r\n                return checkProgress(getProgress);\r\n            },\r\n            (error) => {\r\n                return alert(error.message);\r\n            },\r\n            () => {\r\n                fireStorage\r\n                  .ref(\"images\")\r\n                  .child(blob.name)\r\n                  .getDownloadURL()\r\n                  .then(url => {\r\n                      const checking = async () => {\r\n                        const userPostRef = firestore.doc(`post/${userName}`);\r\n                        const userEachPostRef = firestore.collection(`userPosts`).doc();\r\n                        const snapshot = await userPostRef.get();\r\n                        const userPostData = {...snapshot.data()};\r\n                        const newPost = {\r\n                            caption,\r\n                            imageUrl: url,\r\n                            imageName: blob.name,\r\n                            likes: [],\r\n                            comments: [],\r\n                            userName,\r\n                            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n                            uid: userEachPostRef.id,\r\n                        }\r\n                        await userEachPostRef.set({\r\n                            ...newPost\r\n                        })\r\n\r\n                        if(snapshot.exists) {\r\n                            await userPostRef.update({\r\n                            posts: [\r\n                                ...userPostData.posts,\r\n                                userEachPostRef.id\r\n                            ],\r\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n                        })\r\n                        } else {\r\n                        await userPostRef.set({\r\n                            posts: [\r\n                                userEachPostRef.id\r\n                            ],\r\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n                        })}\r\n                        uploadPost(newPost);\r\n                      }\r\n\r\n                      checking();\r\n                      alert(\"uploaded\")\r\n                      checkUploaded(true);\r\n                })\r\n\r\n            }\r\n            )\r\n    }\r\n\r\n\r\n\r\n    return uploaded ? <Redirect to='/'/> : (\r\n        <div className='newPost__Container'>\r\n                <div className=\"crop-container\">\r\n                    {croppedImage && !image ? (\r\n                        <img src={croppedImage} alt=\"\" className='postImage__cropped'/>\r\n                    ): (\r\n                        <Cropper image={image} crop={crop} aspect={4/4} zoom={zoom} onCropChange={setCrop} onZoomChange={setZoom} onCropComplete={onCropComplete}/>\r\n                    )}\r\n                </div>\r\n                <div className=\"crop-btn\">\r\n                    <Button variant='contained' onClick={handlePopUp} className='choose_btn'>Choose</Button>\r\n                    <Button variant='contained' color='secondary' disabled={image ? false :true} onClick={showCroppedImage}>Done</Button>\r\n                </div>\r\n                <div className='post_info'>\r\n                    <input type=\"file\" id=\"img\" name=\"img\" accept=\"image/*\" onChange={handleChange} className='newPost__Image' ref={inputRef} hidden/>\r\n                    <input type=\"text\" placeholder='Enter A Caption...' value={caption} onChange={e => setCaption(e.target.value)}/>\r\n                    <div id=\"myProgress\">\r\n                        <div id=\"myBar\" style={{width: `${progress}%`}}></div>\r\n                    </div>\r\n                    <Button variant='contained' color='primary' onClick={handleUpload} disabled={croppedImage?false:true}>\r\n                        Upload\r\n                    </Button>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    currentUser: getCurrentUser,\r\n})\r\n\r\nconst mapDispatchTProps = dispatch => ({\r\n    changedCurrentUser: (updatedUser) => dispatch(changeInCurrentUser(updatedUser)),\r\n    uploadPost: (post) => dispatch(addNewPost(post))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchTProps)(AddNewPost);","D:\\React Course\\instagram-clone\\src\\index.js",[],"D:\\React Course\\instagram-clone\\src\\redux\\mainUser\\mainUserAction.js",[],"D:\\React Course\\instagram-clone\\src\\Firebase\\firebase.utils.js",["203"],"import firebase from \"firebase\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/database\";\r\nimport \"firebase/auth\";\r\nimport \"@firebase/storage\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyAiUHNPU-xZX3WdZ2GPwRwTbS3tS8ql0Uo\",\r\n  authDomain: \"instagram-clone-21c3c.firebaseapp.com\",\r\n  projectId: \"instagram-clone-21c3c\",\r\n  storageBucket: \"instagram-clone-21c3c.appspot.com\",\r\n  messagingSenderId: \"109747016304\",\r\n  appId: \"1:109747016304:web:17d16efcb498a69c13dab5\",\r\n  measurementId: \"G-1CFMXQXECB\",\r\n};\r\n\r\nexport const createUserProfileDocument = async (userAuth, AdditionalData) => {\r\n  if (!userAuth) return;\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  const userIdRef = firestore.doc(`usersId/${userAuth.userName}`);\r\n  const snapShot = await userRef.get();\r\n  if (!snapShot.exists) {\r\n    const { email, displayName, Bio, userName, uid } = userAuth;\r\n    const createdAt = new Date();\r\n    try {\r\n      userRef.set({\r\n        userName,\r\n        email,\r\n        displayName,\r\n        Bio,\r\n        createdAt,\r\n        id: uid,\r\n        searchKey: userName.charAt(0).toUpperCase(),\r\n        ...AdditionalData,\r\n      });\r\n      userIdRef.set({\r\n        [userName]: uid,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error while creating an account\");\r\n    }\r\n  }\r\n  return userRef;\r\n};\r\n\r\nexport const getUserDataFromUserName = async (username) => {\r\n  if (!username) return;\r\n  const userRef = firestore.doc(`usersId/${username}`);\r\n  const snapShotfromUsername = await userRef.get();\r\n  if (!snapShotfromUsername.exists) {\r\n    alert(\"username not found\");\r\n    return { userDataRef: null, userPostRef: null };\r\n  } else {\r\n    const userId = snapShotfromUsername.data();\r\n    const userDataRef = firestore.doc(`users/${userId[username]}`);\r\n    const snapShotfromUserId = await userDataRef.get();\r\n    let postObj = await getCurrentUserPost(username);\r\n    if (!snapShotfromUserId.exists) {\r\n      return alert(\"user not found\");\r\n    }\r\n    return { userDataRef, postObj };\r\n  }\r\n};\r\n\r\nconst unfollowingOldUser = (userName, arrayOfuserName) => {\r\n  const indexOfUserName = arrayOfuserName.indexOf(userName);\r\n  if (indexOfUserName > -1) {\r\n    arrayOfuserName.splice(indexOfUserName, 1);\r\n  }\r\n  return arrayOfuserName;\r\n};\r\n\r\nexport const followNewUser = async (newUserName, currentUser) => {\r\n  const currentUserRef = firestore.doc(`users/${currentUser.id}`);\r\n  await currentUserRef.update({\r\n    ...currentUser,\r\n    following: [...currentUser.following, newUserName],\r\n  });\r\n\r\n  return currentUserRef;\r\n};\r\n\r\nexport const unfollowOldUser = async (newUserName, currentUser) => {\r\n  const currentUserRef = firestore.doc(`users/${currentUser.id}`);\r\n  await currentUserRef.update({\r\n    ...currentUser,\r\n    following: unfollowingOldUser(newUserName, currentUser.following),\r\n  });\r\n\r\n  return currentUserRef;\r\n};\r\n\r\nexport const incrementFollowerOfUser = async (userData, currentUserName) => {\r\n  const newUserRef = firestore.doc(`users/${userData.id}`);\r\n  await newUserRef.update({\r\n    ...userData,\r\n    follower: [...userData.follower, currentUserName],\r\n  });\r\n\r\n  return newUserRef;\r\n};\r\n\r\nexport const decrementFollowerOfUser = async (userData, currentUserName) => {\r\n  const newUserRef = firestore.doc(`users/${userData.id}`);\r\n  await newUserRef.update({\r\n    ...userData,\r\n    follower: unfollowingOldUser(currentUserName, userData.follower),\r\n  });\r\n  return newUserRef;\r\n};\r\n\r\nexport const getCurrentUserPost = async (username) => {\r\n  const userPostRef = firestore.doc(`post/${username}`);\r\n  const snapShotfromPostId = await userPostRef.get();\r\n  const userPostData = { ...snapShotfromPostId.data() };\r\n  const postIds = userPostData.posts || [];\r\n  let postObj = {};\r\n  for (let i = 0; i < postIds.length; i++) {\r\n    const userIdRef = firestore.doc(`userPosts/${postIds[i]}`);\r\n    const userIdSnapshot = await userIdRef.get();\r\n    const userPost = { ...userIdSnapshot.data() };\r\n    const userPostId = i + 1;\r\n    postObj[userPostId] = userPost;\r\n  }\r\n  return postObj;\r\n};\r\n\r\nexport const startFetchingPosts = async (currentUserFollowing) => {\r\n  if (currentUserFollowing.length === 0) return null;\r\n  let obj = [];\r\n  const postRef = firestore\r\n    .collection(\"userPosts\")\r\n    .orderBy(\"createdAt\", \"desc\")\r\n    .where(\"userName\", \"in\", currentUserFollowing);\r\n  const snapshot = await postRef.get();\r\n  snapshot.docs.forEach((post) => {\r\n    const postData = { ...post.data() };\r\n\r\n    obj = [...obj, { ...postData }];\r\n  });\r\n  return obj;\r\n};\r\n\r\nexport const incrementingLike = async (post, currentUser) => {\r\n  const postRef = firestore.doc(`userPosts/${post.uid}`);\r\n  const userNotificationRef = firestore.doc(`notifications/${post.userName}`);\r\n  const snapshot = await userNotificationRef.get();\r\n  let notifications = { ...snapshot.data() };\r\n  const newNotification = {\r\n    userName: currentUser,\r\n    notification: `liked your Photo`,\r\n    post,\r\n    type: \"like\",\r\n  };\r\n  if (post.likes.includes(currentUser)) {\r\n    const indexOfUser = post.likes.indexOf(currentUser);\r\n    const { likes } = post;\r\n    likes.splice(indexOfUser, 1);\r\n    post = {\r\n      ...post,\r\n      likes,\r\n    };\r\n    if (post.userName !== currentUser) {\r\n      if (notifications.seen) {\r\n        const notificationIndex =\r\n          notifications.oldNotification.indexOf(newNotification);\r\n        notifications.oldNotification.splice(notificationIndex, 1);\r\n      } else {\r\n        const notificationIndex =\r\n          notifications.newNotification.indexOf(newNotification);\r\n        notifications.newNotification.splice(notificationIndex, 1);\r\n      }\r\n    }\r\n  } else {\r\n    if (!(post.userName === currentUser)) {\r\n      if (Object.keys(notifications).length > 0) {\r\n        notifications = {\r\n          ...notifications,\r\n          newNotification: [\r\n            { ...newNotification },\r\n            ...notifications.newNotification,\r\n          ],\r\n          seen: false,\r\n        };\r\n      } else {\r\n        notifications = {\r\n          ...notifications,\r\n          newNotification: [{ ...newNotification }],\r\n          seen: false,\r\n        };\r\n      }\r\n    }\r\n    post = {\r\n      ...post,\r\n      likes: [...post.likes, currentUser],\r\n    };\r\n  }\r\n  if (snapshot.exists) {\r\n    await userNotificationRef.update(notifications);\r\n  } else {\r\n    await userNotificationRef.set(notifications);\r\n  }\r\n  await postRef.update(post);\r\n  return post;\r\n};\r\n\r\nexport const gettingComment = async (post, comment, currentUser) => {\r\n  const postRef = firestore.doc(`userPosts/${post.uid}`);\r\n  if (!(post.userName === currentUser)) {\r\n    const userNotificationRef = firestore.doc(`notifications/${post.userName}`);\r\n    const snapshot = await userNotificationRef.get();\r\n    const newNotification = {\r\n      userName: currentUser,\r\n      notification: `commented on your photo`,\r\n      post,\r\n      type: \"comment\",\r\n      comment,\r\n    };\r\n    let notifications = { ...snapshot.data() };\r\n    if (Object.keys(notifications).length > 0) {\r\n      notifications = {\r\n        ...notifications,\r\n        newNotification: [\r\n          { ...newNotification },\r\n          ...notifications.newNotification,\r\n        ],\r\n        seen: false,\r\n      };\r\n    } else {\r\n      notifications = {\r\n        ...notifications,\r\n        newNotification: [{ ...newNotification }],\r\n        seen: false,\r\n      };\r\n    }\r\n    if (snapshot.exists) {\r\n      await userNotificationRef.update(notifications);\r\n    } else {\r\n      await userNotificationRef.set(notifications);\r\n    }\r\n  }\r\n  post = {\r\n    ...post,\r\n    comments: [...post.comments, { userName: currentUser, comment }],\r\n  };\r\n  postRef.update(post);\r\n  return post;\r\n};\r\n\r\nexport const onRemovingComment = async (post, comment) => {\r\n  const postRef = firestore.doc(`userPosts/${post.uid}`);\r\n  if (!(post.userName === comment.userName)) {\r\n    const userNotificationRef = firestore.doc(`notifications/${post.userName}`);\r\n    const snapshot = await userNotificationRef.get();\r\n    const newNotification = {\r\n      userName: comment.userName,\r\n      notification: `commented on your photo`,\r\n      post,\r\n      type: \"comment\",\r\n      comment,\r\n    };\r\n    let notifications = { ...snapshot.data() };\r\n    if (notifications.seen) {\r\n      const notificationIndex =\r\n        notifications.oldNotification.indexOf(newNotification);\r\n      notifications.oldNotification.splice(notificationIndex, 1);\r\n    } else {\r\n      const notificationIndex =\r\n        notifications.newNotification.indexOf(newNotification);\r\n      notifications.newNotification.splice(notificationIndex, 1);\r\n    }\r\n    if (snapshot.exists) {\r\n      await userNotificationRef.update(notifications);\r\n    } else {\r\n      await userNotificationRef.set(notifications);\r\n    }\r\n  }\r\n  const { comments } = post;\r\n  const indexOfComment = comments.indexOf(comment);\r\n  comments.splice(indexOfComment, 1);\r\n  post = {\r\n    ...post,\r\n    comments,\r\n  };\r\n  postRef.update(post);\r\n  return post;\r\n};\r\n\r\nexport const deletingPost = async (post, currentUser) => {\r\n  const { uid, imageName } = post;\r\n  const postRef = firestore.doc(`post/${currentUser}`);\r\n  const userEachPostRef = firestore.doc(`userPosts/${uid}`);\r\n  const imageRef = fireStorage.ref(`images/${imageName}`);\r\n  const snapShotFromPost = await postRef.get();\r\n  const userPostData = { ...snapShotFromPost.data() };\r\n  const postData = userPostData.posts;\r\n  if (!postData.includes(uid)) return null;\r\n  const indexOfPost = postData.indexOf(uid);\r\n  postData.splice(indexOfPost, 1);\r\n  const newUserPostData = {\r\n    posts: postData,\r\n    timestamp: userPostData.timestamp,\r\n  };\r\n  await postRef.update(newUserPostData);\r\n  await userEachPostRef.delete();\r\n  await imageRef.delete();\r\n  return null;\r\n};\r\n\r\nexport const updateNotification = async (notification, currentUser) => {\r\n  const notificationRef = firestore.doc(`notifications/${currentUser}`);\r\n  const snapshot = await notificationRef.get();\r\n  const data = { ...snapshot.data() };\r\n  console.log(notification);\r\n  let newData = {};\r\n  if (data.oldNotification?.length > 0) {\r\n    newData = {\r\n      newNotification: [],\r\n      oldNotification: [...notification, ...data.oldNotification],\r\n      seen: true,\r\n    };\r\n  } else {\r\n    newData = {\r\n      newNotification: [],\r\n      oldNotification: [...notification],\r\n      seen: true,\r\n    };\r\n  }\r\n  await notificationRef.update(newData);\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const getCurrentUser = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const unsubscribe = auth.onAuthStateChanged((user) => {\r\n      unsubscribe();\r\n      resolve(user);\r\n    }, reject);\r\n  });\r\n};\r\n\r\nexport const checkForExistingEmail = async (email) => {\r\n  const checkRef = firestore.collection(\"users\");\r\n  let emailExist = false;\r\n  await checkRef\r\n    .where(\"email\", \"==\", email)\r\n    .limit(1)\r\n    .get()\r\n    .then((snapshot) => {\r\n      snapshot.docs.map((user) => {\r\n        emailExist = user.exists;\r\n      });\r\n    });\r\n  return emailExist;\r\n};\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\nexport const fireStorage = firebase.storage();\r\nexport const db = firebase.database();\r\n","D:\\React Course\\instagram-clone\\src\\components\\userPost\\userPost.jsx",[],"D:\\React Course\\instagram-clone\\src\\redux\\mainUser\\mainUserSelector.js",[],"D:\\React Course\\instagram-clone\\src\\components\\headerUserInfo\\headerUserInfo.jsx",[],"D:\\React Course\\instagram-clone\\src\\redux\\user\\userReducer.js",[],"D:\\React Course\\instagram-clone\\src\\components\\signIn\\signIn.jsx",[],"D:\\React Course\\instagram-clone\\src\\components\\afterSignUpPage\\afterSignUpPage.jsx",[],"D:\\React Course\\instagram-clone\\src\\redux\\mainUser\\mainUser.saga.js",[],"D:\\React Course\\instagram-clone\\src\\redux\\user\\user.saga.js",[],"D:\\React Course\\instagram-clone\\src\\components\\userProfileRoute\\userProfileRoute.jsx",[],"D:\\React Course\\instagram-clone\\src\\components\\loader\\loader.jsx",[],"D:\\React Course\\instagram-clone\\src\\redux\\mainUser\\mainUserTypes.js",[],"D:\\React Course\\instagram-clone\\src\\components\\post\\post.jsx",[],"D:\\React Course\\instagram-clone\\src\\components\\anotherUserProfile\\anotherUserProfile.jsx",[],"D:\\React Course\\instagram-clone\\src\\redux\\posts\\posts.types.js",[],"D:\\React Course\\instagram-clone\\src\\reportWebVitals.js",[],"D:\\React Course\\instagram-clone\\src\\redux\\posts\\posts.reducer.js",[],"D:\\React Course\\instagram-clone\\src\\redux\\posts\\posts.selector.js",[],"D:\\React Course\\instagram-clone\\src\\redux\\user\\userSelector.js",[],"D:\\React Course\\instagram-clone\\src\\redux\\user\\userTypes.js",[],"D:\\React Course\\instagram-clone\\src\\redux\\store.js",[],"D:\\React Course\\instagram-clone\\src\\redux\\posts\\posts.saga.js",[],"D:\\React Course\\instagram-clone\\src\\redux\\posts\\posts.action.js",[],"D:\\React Course\\instagram-clone\\src\\redux\\root.saga.js",[],"D:\\React Course\\instagram-clone\\src\\components\\userContent\\usersContent.jsx",[],"D:\\React Course\\instagram-clone\\src\\components\\addNewPost\\functionsTCrop.js",[],"D:\\React Course\\instagram-clone\\src\\components\\signup\\signup.jsx",[],"D:\\React Course\\instagram-clone\\src\\redux\\mainUser\\mainUserReducer.js",[],"D:\\React Course\\instagram-clone\\src\\components\\users\\users.jsx",[],"D:\\React Course\\instagram-clone\\src\\redux\\posts\\functionsInReducers.js",[],"D:\\React Course\\instagram-clone\\src\\components\\header\\header-mobile\\header-mobile.jsx",[],"D:\\React Course\\instagram-clone\\src\\components\\header\\header-pc\\header-pc.jsx",[],"D:\\React Course\\instagram-clone\\src\\components\\userPostCollection\\userPostCollection.jsx",[],"D:\\React Course\\instagram-clone\\src\\components\\Notification\\Notification.jsx",["204","205"],"\r\nimport React, {useEffect} from 'react';\r\nimport './Notification.scss';\r\nimport {connect} from 'react-redux';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport {loadCurrentUserNotification, getCurrentUser} from '../../redux/mainUser/mainUserSelector';\r\nimport {updateNotification} from '../../redux/mainUser/mainUserAction';\r\n\r\nfunction Notification({notification, updatingNotification, currentUser}) {\r\n    const {newNotification, oldNotification} = notification;\r\n    useEffect(() => {\r\n        return () => {\r\n            newNotification?.length > 0 && updatingNotification(newNotification, currentUser.userName)\r\n        }\r\n    })\r\n    return (\r\n        <div className='notification__container'>\r\n            <div className=\"notification new__notification\">\r\n                <h4>New Notifications</h4>\r\n                {\r\n                    newNotification ? newNotification.map((obj, index) => (\r\n                        <div className='eachNotification' key={index}>\r\n                            <div className='eachNotification__content'>\r\n                                <div className=\"eachNotification__writtenContent\">\r\n                                    <p>{`${obj.userName} ${obj.notification}`}</p>\r\n                                </div>\r\n                                <div className='eachNotification__postContent'>\r\n                                    <img src={obj.post.imageUrl} className='eachNotification__image'/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )):(\r\n                        <div className=\"eachNotification\">\r\n                            <span className=\"eachNotification__content\">No New Notification</span>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n            <div className=\"notification old__notification\">\r\n                <h4>Old Notifications</h4>\r\n                {\r\n                    oldNotification?.map((obj, index) => {\r\n                        console.log(oldNotification.length)\r\n                        return (\r\n                        <div className='eachNotification' key={index}>\r\n                            <div className='eachNotification__content'>\r\n                                <div className=\"eachNotification__writtenContent\">\r\n                                    <p>{`${obj.userName} ${obj.notification}`}</p>\r\n                                </div>\r\n                                <div className='eachNotification__postContent'>\r\n                                    <img src={obj.post.imageUrl} className='eachNotification__image'/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )})\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    notification: loadCurrentUserNotification,\r\n    currentUser: getCurrentUser\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updatingNotification: (notification, user) => dispatch(updateNotification(notification, user))\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Notification);\r\n","D:\\React Course\\instagram-clone\\src\\components\\seachUser\\SearchUser.jsx",["206"],"import React, {useState, useEffect} from 'react';\r\nimport {firestore} from '../../Firebase/firebase.utils';\r\nimport {loadProfileBySearch, profileLoadedBySearch} from '../../redux/user/userAction';\r\nimport {Link} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport './searchUser.scss'\r\n\r\nfunction SearchUser({loadProfile, loadProfileBySearch}) {\r\n    const [searchContent, getSearchContent] = useState('');\r\n    const [searchResult, getSearchResult] = useState([]);\r\n    \r\n    const checkRef = firestore.collection('users');\r\n    useEffect(() => {\r\n        if(searchContent.length === 0) {\r\n            getSearchResult([])\r\n        }\r\n        if(searchContent.length === 1) {\r\n            let userArr = []\r\n            checkRef.where('searchKey', '==', searchContent.toUpperCase()).limit(10).get().then(snapshot => {\r\n                snapshot.docs.map(user => {\r\n                    return userArr = [\r\n                        ...userArr,\r\n                        {...user.data()}\r\n                    ]\r\n                })\r\n                getSearchResult(userArr) \r\n            })\r\n        }\r\n        if(searchResult && searchContent.length > 1){\r\n            let userArr = []\r\n            userArr = searchResult.filter(user => {\r\n                return user.userName.toUpperCase().includes(searchContent.toUpperCase())\r\n            })\r\n            getSearchResult(userArr);\r\n        }\r\n    }, [searchContent]) \r\n\r\n    const handleChange = e => {\r\n        getSearchContent(e.target.value);\r\n    }\r\n    return (\r\n        <div className='searchUser__container'>\r\n            <div className=\"searchUser\">\r\n                <input type=\"text\" placeholder='Search' className='search__input' onChange={handleChange} value={searchContent}/>\r\n                <div className=\"search__result\">\r\n                    {\r\n                        searchResult && searchResult.map((user, index) => (\r\n                            <div className=\"searchUser__resultContainer\" key={index}>\r\n                                <div >\r\n                                    <Avatar className='userProfileImage' alt='Sarthak' src={user.profileImg}/>\r\n                                </div>\r\n                                <p onClick={() => {\r\n                                    loadProfileBySearch();\r\n                                    loadProfile(user);\r\n                                }}><Link to={`users/${user.userName}`}>{user.userName}</Link></p>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    loadProfile: (profile) => dispatch(loadProfileBySearch(profile)),\r\n    loadProfileBySearch: () => dispatch(profileLoadedBySearch())\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(SearchUser);\r\n","D:\\React Course\\instagram-clone\\src\\components\\addNewProfileImage\\AddNewProfileImage.jsx",["207"],"\r\nimport '../addNewPost/addNewPost.scss';\r\n\r\nimport React, {useState, useCallback} from 'react';\r\nimport {fireStorage, firestore} from '../../Firebase/firebase.utils';\r\nimport {connect} from 'react-redux';\r\nimport {createStructuredSelector} from 'reselect';\r\nimport {getCurrentUser} from '../../redux/mainUser/mainUserSelector';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {updateUserProfileImage} from '../../redux/mainUser/mainUserAction';\r\nimport Button from '@material-ui/core/Button';\r\nimport Cropper from 'react-easy-crop';\r\nimport {getCroppedImg} from '../addNewPost/functionsTCrop';\r\n\r\n\r\n\r\nconst AddNewProfileImage = ({currentUser, updateNewProfileImage}) => {\r\n    const {id} = currentUser;\r\n    const inputRef = React.useRef();\r\n\r\n    const [oldImage, setOldImage] = useState(null);\r\n    const [image, setImage] = useState(null);\r\n    const [crop, setCrop] = useState({x: 0, y: 0});\r\n    const [cropped, setCroppedArea] = useState(null);\r\n    const [croppedImage, setCroppedImage] = useState(null);\r\n    const [zoom, setZoom] = useState(1);\r\n    const [uploaded, checkUploaded] = useState(false);\r\n    const [blob, setBlob] = useState(null);\r\n    const [progress, checkProgress] = useState(0);\r\n    \r\n    const handleChange = (e) => {\r\n        if(e.target.files.length > 0){\r\n            setCroppedImage(null);\r\n            setOldImage(e.target.files[0]);\r\n            const ImageUrl = URL.createObjectURL(e.target.files[0]);\r\n            setImage(ImageUrl);\r\n        }\r\n    }\r\n    \r\n    const showCroppedImage = useCallback(async () => {\r\n        try {\r\n            let croppedImage = await getCroppedImg(\r\n                image,\r\n                cropped,\r\n                setBlob,\r\n                oldImage\r\n            )\r\n                setImage(null);\r\n                setCroppedImage(croppedImage)\r\n\r\n            } catch (e) {\r\n                console.error(e)\r\n        }\r\n      }, [cropped])\r\n\r\n \r\n\r\n    const handlePopUp = () => inputRef.current.click();\r\n\r\n    const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\r\n        setCroppedArea(croppedAreaPixels)\r\n      }, [])\r\n\r\n\r\n    const handleUpload = (e) => {\r\n        const uploadTask = fireStorage.ref(`profileImages/${blob.name}`).put(blob);\r\n        uploadTask.on(\r\n            'state_changed',\r\n            (snapshot) => {\r\n                const getProgress = Math.round(\r\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n                );\r\n\r\n                return checkProgress(getProgress);\r\n            },\r\n            (error) => {\r\n                return alert(error.message);\r\n            },\r\n            () => {\r\n                fireStorage\r\n                  .ref(\"profileImages\")\r\n                  .child(blob.name)\r\n                  .getDownloadURL()\r\n                  .then(url => {\r\n                      const checking = async () => {\r\n                        const userRef = firestore.doc(`users/${id}`);\r\n                        const snapshot = await userRef.get();\r\n                        const userData = {...snapshot.data()};\r\n                        const updateUserData = {\r\n                            ...userData,\r\n                            profileImg: url\r\n                        }\r\n\r\n                        if(snapshot.exists) {\r\n                            await userRef.update({\r\n                            ...updateUserData\r\n                        })\r\n                        } else {\r\n                            await userRef.set({\r\n                            ...updateUserData\r\n                        })}\r\n                        updateNewProfileImage(updateUserData)\r\n                      }\r\n\r\n                      checking();\r\n                      alert(\"Profile Image Uploaded\")\r\n                      checkUploaded(true);\r\n                })\r\n\r\n            }\r\n            )\r\n    }\r\n    return uploaded ? <Redirect to={`/users/${currentUser.userName}`}/> : (\r\n        <div className='newPost__Container'>\r\n                <div className=\"crop-container\">\r\n                    {croppedImage && !image ? (\r\n                        <img src={croppedImage} alt=\"\" className='profileImage__cropped'/>\r\n                        ): (\r\n                            <Cropper image={image} crop={crop} aspect={4/4} zoom={zoom} onCropChange={setCrop} onZoomChange={setZoom} onCropComplete={onCropComplete} cropShape='round'/>\r\n                        )}\r\n                </div>\r\n                <div className=\"crop-btn\">\r\n                    <Button variant='contained' onClick={handlePopUp} className='choose_btn'>Choose</Button>\r\n                    <Button variant='contained' color='secondary' disabled={image ? false :true} onClick={showCroppedImage}>Done</Button>\r\n                </div>\r\n                <div className='post_info'>\r\n                    <input type=\"file\" id=\"img\" name=\"img\" accept=\"image/*\" onChange={handleChange} className='newPost__Image' ref={inputRef} hidden/>\r\n                    <div id=\"myProgress\">\r\n                        <div id=\"myBar\" style={{width: `${progress}%`}}></div>\r\n                    </div>\r\n                    <Button variant='contained' color='primary' onClick={handleUpload} disabled={croppedImage?false:true}>\r\n                        Upload\r\n                    </Button>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    currentUser: getCurrentUser,\r\n})\r\n\r\nconst mapDispatchTProps = dispatch => ({\r\n    updateNewProfileImage: updatedUser => dispatch(updateUserProfileImage(updatedUser))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchTProps)(AddNewProfileImage);","D:\\React Course\\instagram-clone\\src\\components\\showFollow\\ShowFollow.jsx",[],"D:\\React Course\\instagram-clone\\src\\components\\messageChatBox\\MessageChatBox.jsx",["208"],"import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport firebase from \"firebase\";\r\nimport { firestore } from \"../../Firebase/firebase.utils\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { getCurrentUser } from \"../../redux/mainUser/mainUserSelector\";\r\nimport { useHistory } from \"react-router\";\r\nimport Styles from \"./MessageChatBox.module.scss\";\r\n\r\nfunction MessageChatBox({ currentUser, match }) {\r\n  const [messageInput, getMessageInput] = useState(\"\");\r\n  const [userList, getUserList] = useState([]);\r\n  const [messages, getMessages] = useState([]);\r\n  const [noUser, setNoUser] = useState(\r\n    currentUser?.userName === match.params.userId\r\n  );\r\n\r\n  let messagesId = [];\r\n  const history = useHistory();\r\n\r\n  const getMessagedUsersList = async () => {\r\n    const userMessageRef = firestore.doc(\r\n      `userMessages/${currentUser?.userName}`\r\n    );\r\n    const userSnapshot = await userMessageRef.get();\r\n    const messageData = { ...userSnapshot.data() };\r\n    messageData.messages &&\r\n      getUserList([\r\n        ...Object.keys(messageData?.messages).map((user) => ({\r\n          user,\r\n          seen: messageData.messages[user].seen,\r\n        })),\r\n      ]);\r\n  };\r\n\r\n  const verifyOtherUser = async () => {\r\n    const otherUserRef = firestore.doc(`userMessages/${match.params.userId}`);\r\n    const otherUserSnapshot = await otherUserRef.get();\r\n    return !otherUserSnapshot.exists\r\n      ? setNoUser(true)\r\n      : setNoUser(currentUser?.userName === match.params.userId);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMessages([]);\r\n    getMessagedUsersList();\r\n    verifyOtherUser();\r\n    messagesId = [];\r\n    firestore\r\n      .doc(`userMessages/${currentUser?.userName}`)\r\n      .onSnapshot(async (snapshot) => {\r\n        const messageData = { ...snapshot.data() };\r\n        console.log(\"1\", match.params.userId);\r\n        if (!messageData.messages[match.params.userId].seen) {\r\n          console.log(\"2\", match.params.userId);\r\n          // firestore.doc(`userMessages/${currentUser?.userName}`).update({\r\n          //   messages: {\r\n          //     ...messageData.messages,\r\n          //     [match.params.userId]: {\r\n          //       message: [...messageData.messages[match.params.userId].message],\r\n          //       seen: true,\r\n          //       timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n          //     },\r\n          //   },\r\n          // });\r\n        }\r\n        const newMessagesId = messageData?.messages\r\n          ? messageData?.messages[match?.params?.userId]?.message\r\n          : [];\r\n        if (userList.length < Object.keys(messageData?.messages).length) {\r\n          getUserList([\r\n            ...Object.keys(messageData?.messages).map((user) => ({\r\n              user,\r\n              seen: messageData.messages[user].seen,\r\n            })),\r\n          ]);\r\n        }\r\n        if (newMessagesId?.length > 0) {\r\n          for (let i = 0; i < newMessagesId.length; i++) {\r\n            if (!messagesId.includes(newMessagesId[i])) {\r\n              const userMessageRef = firestore.doc(\r\n                `messages/${newMessagesId[i]}`\r\n              );\r\n              const messageSnapshot = await userMessageRef.get();\r\n              const messageData = messageSnapshot.data();\r\n              getMessages((prevValue) => {\r\n                return [\r\n                  ...prevValue,\r\n                  {\r\n                    ...messageData,\r\n                  },\r\n                ];\r\n              });\r\n            }\r\n          }\r\n          messagesId = newMessagesId;\r\n        }\r\n      });\r\n  }, [match?.params?.userId]);\r\n\r\n  const handleMessageInput = (e) => {\r\n    if (!e) return;\r\n\r\n    getMessageInput(e.target.value);\r\n  };\r\n\r\n  const handleSendMessage = async () => {\r\n    if (messageInput.length <= 0) return;\r\n    const userEachMessage = firestore.collection(`messages`).doc();\r\n    const { userName: cUserName } = currentUser;\r\n    const userMessageRef = firestore.doc(`userMessages/${cUserName}`);\r\n    const otherUserMessageRef = firestore.doc(\r\n      `userMessages/${match.params.userId}`\r\n    );\r\n    const userSnapshot = await userMessageRef.get();\r\n    const otherUserSnapshot = await otherUserMessageRef.get();\r\n    const newMessage = {\r\n      message: messageInput,\r\n      from: currentUser?.userName,\r\n      to: match.params.userId,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    };\r\n\r\n    await userEachMessage.set({\r\n      ...newMessage,\r\n    });\r\n    if (!userSnapshot.exists) {\r\n      await userMessageRef.set({\r\n        messages: {\r\n          [match.params.userId]: {\r\n            message: [userEachMessage.id],\r\n            seen: true,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n          },\r\n        },\r\n      });\r\n    } else {\r\n      if (!userSnapshot.data().messages[match.params.userId]) {\r\n        await userMessageRef.update({\r\n          messages: {\r\n            ...userSnapshot.data().messages,\r\n            [match.params.userId]: {\r\n              message: [userEachMessage.id],\r\n              seen: true,\r\n              timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            },\r\n          },\r\n        });\r\n      } else {\r\n        await userMessageRef.update({\r\n          messages: {\r\n            ...userSnapshot.data().messages,\r\n            [match.params.userId]: {\r\n              message: [\r\n                ...userSnapshot.data().messages[match.params.userId].message,\r\n                userEachMessage.id,\r\n              ],\r\n              seen: true,\r\n              timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            },\r\n          },\r\n        });\r\n      }\r\n    }\r\n    if (!otherUserSnapshot.exists) {\r\n      await otherUserMessageRef.set({\r\n        messages: {\r\n          [cUserName]: {\r\n            message: [userEachMessage.id],\r\n            seen: false,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n          },\r\n        },\r\n      });\r\n    } else {\r\n      if (!otherUserSnapshot.data().messages[cUserName]) {\r\n        await otherUserMessageRef.update({\r\n          messages: {\r\n            ...otherUserSnapshot.data().messages,\r\n            [cUserName]: {\r\n              message: [userEachMessage.id],\r\n              seen: false,\r\n              timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            },\r\n          },\r\n        });\r\n      } else {\r\n        await otherUserMessageRef.update({\r\n          messages: {\r\n            ...otherUserSnapshot.data().messages,\r\n            [cUserName]: {\r\n              message: [\r\n                ...otherUserSnapshot.data().messages[cUserName].message,\r\n                userEachMessage.id,\r\n              ],\r\n              seen: false,\r\n              timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            },\r\n          },\r\n        });\r\n      }\r\n    }\r\n    getMessageInput(\"\");\r\n    await getMessagedUsersList();\r\n  };\r\n\r\n  return (\r\n    <div className={Styles.messageChatBoxSection}>\r\n      <div className={Styles.messageChatBox}>\r\n        <div className={Styles.usersContainer}>\r\n          {userList?.map((user, index) => {\r\n            return (\r\n              <div\r\n                className={Styles.eachUserName}\r\n                key={index}\r\n                onClick={() => history.push(`/message/${user?.user}`)}\r\n                style={\r\n                  user.seen || match.params.userId === user?.user\r\n                    ? {}\r\n                    : {\r\n                        fontWeight: \"bold\",\r\n                      }\r\n                }\r\n              >\r\n                <span>{user.user}</span>\r\n                <span\r\n                  className={Styles.newMessage}\r\n                  style={\r\n                    user.seen || match.params.userId === user?.user\r\n                      ? { display: \"none\" }\r\n                      : {}\r\n                  }\r\n                >\r\n                  New Messages\r\n                </span>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div className={Styles.messageBox}>\r\n          {noUser ? (\r\n            <div className={Styles.noUserContainer}>Your Messages</div>\r\n          ) : (\r\n            <>\r\n              <div className={Styles.userName}>\r\n                <Link to={`/users/${match.params.userId}`}>\r\n                  {match.params.userId}\r\n                </Link>\r\n              </div>\r\n              <div className={Styles.message}>\r\n                <div className={Styles.messagesContainer}>\r\n                  {messages.map((message, index) => {\r\n                    return (\r\n                      <div\r\n                        className={\r\n                          message?.from === currentUser?.userName\r\n                            ? Styles.UserMessage\r\n                            : Styles.otherUserMessageRef\r\n                        }\r\n                        key={index}\r\n                      >\r\n                        <span>{message?.message}</span>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n                <div className={Styles.messageInputContainer}>\r\n                  <input\r\n                    className={Styles.messageInput}\r\n                    placeholder=\"Message...\"\r\n                    value={messageInput}\r\n                    onChange={handleMessageInput}\r\n                  />\r\n                  {messageInput.length > 0 && (\r\n                    <button onClick={handleSendMessage}>Send</button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  currentUser: getCurrentUser,\r\n});\r\n\r\nexport default connect(mapStateToProps)(MessageChatBox);\r\n",{"ruleId":"209","severity":1,"message":"210","line":46,"column":6,"nodeType":"211","endLine":46,"endColumn":39,"suggestions":"212"},{"ruleId":"209","severity":1,"message":"213","line":54,"column":10,"nodeType":"211","endLine":54,"endColumn":19,"suggestions":"214"},{"ruleId":"215","severity":1,"message":"216","line":351,"column":32,"nodeType":"217","messageId":"218","endLine":351,"endColumn":34},{"ruleId":"219","severity":1,"message":"220","line":28,"column":37,"nodeType":"221","endLine":28,"endColumn":103},{"ruleId":"219","severity":1,"message":"220","line":51,"column":37,"nodeType":"221","endLine":51,"endColumn":103},{"ruleId":"209","severity":1,"message":"222","line":37,"column":8,"nodeType":"211","endLine":37,"endColumn":23,"suggestions":"223"},{"ruleId":"209","severity":1,"message":"213","line":54,"column":10,"nodeType":"211","endLine":54,"endColumn":19,"suggestions":"224"},{"ruleId":"209","severity":1,"message":"225","line":49,"column":18,"nodeType":"211","endLine":49,"endColumn":20},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkingCurrentUser', 'currentUser', and 'newNotification'. Either include them or remove the dependency array. If 'checkingCurrentUser' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["226"],"React Hook useCallback has missing dependencies: 'image' and 'oldImage'. Either include them or remove the dependency array.",["227"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'checkRef' and 'searchResult'. Either include them or remove the dependency array.",["228"],["229"],"Assignments to the 'messagesId' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.",{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"232","fix":"236"},"Update the dependencies array to be: [checkingCurrentUser, currentUser, getUserNotification, isSignedIn, newNotification]",{"range":"237","text":"238"},"Update the dependencies array to be: [cropped, image, oldImage]",{"range":"239","text":"240"},"Update the dependencies array to be: [checkRef, searchContent, searchResult]",{"range":"241","text":"242"},{"range":"243","text":"240"},[1573,1606],"[checkingCurrentUser, currentUser, getUserNotification, isSignedIn, newNotification]",[2007,2016],"[cropped, image, oldImage]",[1462,1477],"[checkRef, searchContent, searchResult]",[1906,1915]]